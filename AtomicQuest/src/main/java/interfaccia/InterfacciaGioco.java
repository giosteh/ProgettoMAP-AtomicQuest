
package interfaccia;

import controller.AzioneSuInterfaccia;
import controller.GestioneSalvataggi;
import controller.OutputParser;
import controller.Parser;
import controller.RESTMeteoThread;
import entita.Giocatore;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * Classe che rappresenta l'interfaccia di gioco principale.
 */
public class InterfacciaGioco extends javax.swing.JFrame {

    private final Parser parser;
    private final Giocatore giocatore;
    private OutputParser outputParser = new OutputParser();
    
    /**
     * Costruttore con parametri per la nuova partita.
     * @param giocatore il giocatore
     */
    public InterfacciaGioco(Giocatore giocatore) {
        this.initComponents();
        this.textAreaOutput.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        this.textFieldInput.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        this.centraFrame();
        this.giocatore = giocatore;
        this.parser = new Parser(this.giocatore);
        this.inizializzaImmaginiLabel();
        new RESTMeteoThread(this.labelMeteo).visualizzaMeteo();
        String s = parser.getIntroduzione().getStringaDaStampare() + "\n Che vuoi fare? >> ";
        new StampaThread(s, this.textAreaOutput, this.textFieldInput).stampa();
        this.textFieldInput.grabFocus();
    }
    
    /**
     * Costruttore per la continuazione di una partita.
     */
    public InterfacciaGioco() {
        this.initComponents();
        this.textAreaOutput.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        this.textFieldInput.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        this.centraFrame();
        this.giocatore = GestioneSalvataggi.selezionaDaDB("Utente");
        this.parser = new Parser(this.giocatore);
        this.inizializzaImmaginiLabelDopoCaricamento();
        new RESTMeteoThread(this.labelMeteo).visualizzaMeteo();
        this.textAreaOutput.append(this.giocatore.getStanzaCorrente().getBenvenuto() + "\n Che vuoi fare? >> ");
        this.textFieldInput.setEditable(true);
        this.textFieldInput.grabFocus();
    }
    
    /**
     * Metodo che inizializza le immagini delle label.
     */
    private void inizializzaImmaginiLabel() {
        this.labelTuta.setIcon(new ImageIcon("./risorse/img/TutaIntegra.jpg"));
        this.labelTitolo.setIcon(new ImageIcon("./risorse/img/Titolo.png"));
        this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneBassa.jpg")); 
    }
    
    /**
     * Metodo che inizializza le immagini delle label dopo il caricamento.
     */
    private void inizializzaImmaginiLabelDopoCaricamento() {
        this.labelTitolo.setIcon(new ImageIcon("./risorse/img/Titolo.png"));
        if (this.giocatore.isTutaIntegra()) {
            this.labelTuta.setIcon(new ImageIcon("./risorse/img/TutaIntegra.jpg"));
        } else {
            this.labelTuta.setIcon(new ImageIcon("./risorse/img/TutaRotta.jpg"));
        }

        if (null != this.giocatore.getStanzaCorrente().getEsposizRadioattiva())
            switch (this.giocatore.getStanzaCorrente().getEsposizRadioattiva()) {
                case BASSO:
                    this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneBassa.jpg"));
                    break;
                case MEDIO:
                    this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneMedia.jpg"));
                    break;
                case ELEVATO:
                    this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneElevata.jpg"));
                    break;
                default:
                    break;
            }
    }

    /**
     * Metodo che centra il frame.
     */
    private void centraFrame() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        int x = (screenSize.width - frameSize.width) / 2;
        int y = (screenSize.height - frameSize.height) / 2;
        setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipale = new javax.swing.JPanel();
        panelSinistra = new javax.swing.JPanel();
        barraScrolloTextArea = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        textFieldInput = new javax.swing.JTextField();
        labelMeteo = new javax.swing.JLabel();
        buttonPausa = new javax.swing.JButton();
        buttonGuida = new javax.swing.JButton();
        panelDestra = new javax.swing.JPanel();
        labelTuta = new javax.swing.JLabel();
        buttonInventario = new javax.swing.JButton();
        labelRadioattivita = new javax.swing.JLabel();
        labelTitolo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AtomicQuest");
        setResizable(false);

        panelPrincipale.setBackground(new java.awt.Color(0, 0, 0));

        panelSinistra.setBackground(new java.awt.Color(0, 0, 0));
        panelSinistra.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 147, 72), 2));
        panelSinistra.setForeground(new java.awt.Color(255, 255, 255));

        barraScrolloTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(52, 52, 0), 2));
        barraScrolloTextArea.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        barraScrolloTextArea.setAutoscrolls(true);

        textAreaOutput.setEditable(false);
        textAreaOutput.setBackground(new java.awt.Color(0, 0, 0));
        textAreaOutput.setColumns(20);
        textAreaOutput.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        textAreaOutput.setForeground(new java.awt.Color(204, 255, 102));
        textAreaOutput.setLineWrap(true);
        textAreaOutput.setRows(5);
        textAreaOutput.setWrapStyleWord(true);
        textAreaOutput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(20, 20, 20), 2));
        barraScrolloTextArea.setViewportView(textAreaOutput);

        textFieldInput.setEditable(false);
        textFieldInput.setBackground(new java.awt.Color(20, 19, 19));
        textFieldInput.setFont(new java.awt.Font("Courier New", 1, 19)); // NOI18N
        textFieldInput.setForeground(new java.awt.Color(158, 240, 26));
        textFieldInput.setBorder(null);
        textFieldInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textFieldInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldInputActionPerformed(evt);
            }
        });

        buttonPausa.setBackground(new java.awt.Color(35, 35, 35));
        buttonPausa.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        buttonPausa.setForeground(new java.awt.Color(95, 225, 131));
        buttonPausa.setText("PAUSA");
        buttonPausa.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(43, 147, 72), 2, true));
        buttonPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPausaActionPerformed(evt);
            }
        });

        buttonGuida.setBackground(new java.awt.Color(35, 35, 35));
        buttonGuida.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        buttonGuida.setForeground(new java.awt.Color(95, 225, 131));
        buttonGuida.setText("GUIDA");
        buttonGuida.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(43, 147, 72), 2, true));
        buttonGuida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGuidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSinistraLayout = new javax.swing.GroupLayout(panelSinistra);
        panelSinistra.setLayout(panelSinistraLayout);
        panelSinistraLayout.setHorizontalGroup(
            panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSinistraLayout.createSequentialGroup()
                .addGroup(panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelSinistraLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(buttonPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonGuida, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 350, Short.MAX_VALUE)
                        .addComponent(labelMeteo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSinistraLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldInput)
                            .addComponent(barraScrolloTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE))))
                .addGap(15, 15, 15))
        );
        panelSinistraLayout.setVerticalGroup(
            panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSinistraLayout.createSequentialGroup()
                .addGroup(panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSinistraLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelMeteo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSinistraLayout.createSequentialGroup()
                        .addContainerGap(9, Short.MAX_VALUE)
                        .addGroup(panelSinistraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonGuida, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addComponent(barraScrolloTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldInput, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        panelDestra.setBackground(new java.awt.Color(0, 0, 0));
        panelDestra.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 147, 72), 2));

        buttonInventario.setBackground(new java.awt.Color(11, 11, 11));
        buttonInventario.setFont(new java.awt.Font("Courier New", 1, 22)); // NOI18N
        buttonInventario.setForeground(new java.awt.Color(158, 240, 26));
        buttonInventario.setText("INVENTARIO");
        buttonInventario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(158, 240, 26), 2, true));
        buttonInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInventarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDestraLayout = new javax.swing.GroupLayout(panelDestra);
        panelDestra.setLayout(panelDestraLayout);
        panelDestraLayout.setHorizontalGroup(
            panelDestraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDestraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDestraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonInventario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(labelTuta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDestraLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(labelRadioattivita, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelDestraLayout.setVerticalGroup(
            panelDestraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDestraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRadioattivita, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(labelTuta, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonInventario, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelPrincipaleLayout = new javax.swing.GroupLayout(panelPrincipale);
        panelPrincipale.setLayout(panelPrincipaleLayout);
        panelPrincipaleLayout.setHorizontalGroup(
            panelPrincipaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipaleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSinistra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelDestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panelPrincipaleLayout.createSequentialGroup()
                .addGap(337, 337, 337)
                .addComponent(labelTitolo, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPrincipaleLayout.setVerticalGroup(
            panelPrincipaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipaleLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(labelTitolo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPrincipaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelDestra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSinistra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldInputActionPerformed
        String s = this.textFieldInput.getText();
        this.textFieldInput.setText("");

        if (s.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Devi inserire un comando!");
        } else {
            this.outputParser = this.parser.analizzaComando(s);
            if (this.outputParser.getAzione().ordinal() == AzioneSuInterfaccia.FINE.ordinal()) {
                this.textAreaOutput.append(s.toUpperCase().trim() + "\n");
                new StampaThread("\n\n" + outputParser.getStringaDaStampare(), this.textAreaOutput, this.textFieldInput,
                        this.outputParser).stampa();
                return;
            }
            this.textAreaOutput.append(s.toUpperCase().trim() + "\n");
            new StampaThread("\n\n" + outputParser.getStringaDaStampare() + "\n Che vuoi fare? >> ",
                    this.textAreaOutput, this.textFieldInput).stampa();
            if (this.outputParser.getAzione() == AzioneSuInterfaccia.TUTAINTEGRA ||
                    this.outputParser.getAzione() == AzioneSuInterfaccia.TUTAROTTA) {
                this.gestisciLabelTuta();
            }
            if (this.outputParser.getAzione() == AzioneSuInterfaccia.RADIAZIONIBASSE ||
                    this.outputParser.getAzione() == AzioneSuInterfaccia.RADIAZIONIMEDIE ||
                    this.outputParser.getAzione() == AzioneSuInterfaccia.RADIAZIONIELEVATE) {
                this.gestisciLabelRadioattivita();
            }
        }
    }//GEN-LAST:event_textFieldInputActionPerformed

    private void buttonInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInventarioActionPerformed
        new InterfacciaInventario(this.giocatore).setVisible(true);
    }//GEN-LAST:event_buttonInventarioActionPerformed

    private void buttonPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPausaActionPerformed
        new InterfacciaPausa(this, this.giocatore).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_buttonPausaActionPerformed

    private void buttonGuidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGuidaActionPerformed
        new InterfacciaGuida().setVisible(true);
    }//GEN-LAST:event_buttonGuidaActionPerformed

    /**
     * Metodo che gestisce l'immagine della tuta.
     */
    private void gestisciLabelTuta() {
        if (this.outputParser.getAzione() == AzioneSuInterfaccia.TUTAINTEGRA) {
            this.labelTuta.setIcon(new ImageIcon("./risorse/img/TutaIntegra.jpg"));
        } else {
            this.labelTuta.setIcon(new ImageIcon("./risorse/img/TutaRotta.jpg"));
        }
    }
    
    /**
     * Metodo che gestisce l'immagine della radioattività.
     */
    private void gestisciLabelRadioattivita() {
        if (null == this.outputParser.getAzione()) {
            this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneElevata.jpg"));
        } else switch (this.outputParser.getAzione()) {
            case RADIAZIONIBASSE:
                this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneBassa.jpg"));
                break;
            case RADIAZIONIMEDIE:
                this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneMedia.jpg"));
                break;
            default:
                this.labelRadioattivita.setIcon(new ImageIcon("./risorse/img/RadiazioneElevata.jpg"));
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane barraScrolloTextArea;
    private javax.swing.JButton buttonGuida;
    private javax.swing.JButton buttonInventario;
    private javax.swing.JButton buttonPausa;
    private javax.swing.JLabel labelMeteo;
    private javax.swing.JLabel labelRadioattivita;
    private javax.swing.JLabel labelTitolo;
    private javax.swing.JLabel labelTuta;
    private javax.swing.JPanel panelDestra;
    private javax.swing.JPanel panelPrincipale;
    private javax.swing.JPanel panelSinistra;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextField textFieldInput;
    // End of variables declaration//GEN-END:variables
}
